#INCLUDE "course.module"

--{{{ CONSTANTS
VAL [][]BYTE SCREEN IS
  --"0         1         2         3         4         5         6         7        ",
  --"0123456789012345678901234567890123456789012345678901234567890123456789012345678"
   ["############################################################",  -- 00
    "#                                                          #",  --  1
    "#                                                          #",  --  2
    "#                                                          #",  --  3
    "#                                                          #",  --  4
    "#                 ##############                           #",  --  5
    "#                                                          #",  --  6
    "#                                                          #",  --  7
    "#                                                          #",  --  8
    "############################################################"]: --  9
  --"123456789012345678901234567890123456789012345678901234567890123456789012345678"
VAL []INT SCREEN.POINTS IS [0,59,0,9]:

VAL INT DIR.UP IS 0:
VAL INT DIR.RIGHT IS 1:
VAL INT DIR.DOWN IS 2:
VAL INT DIR.LEFT IS 3:

VAL INT CYLONS.SPEED IS 1:
--}}}

--{{{ PROTOCOLS
--* Screen Protocol
-- Using this so the screen can be claimed
PROTOCOL SCRPROTO
  CASE
    clear.screen
    string.x.y; BYTE; BYTE; BYTE::[]BYTE
    int.x.y; BYTE; BYTE; INT
    char.x.y; BYTE; BYTE; BYTE
:
--}}}

--* Print the SCREEN (just once, pls)
PROC init.screen (SHARED CHAN SCRPROTO out!)
  CLAIM out!
    SEQ
      out ! clear.screen
      SEQ y = 0 FOR SIZE SCREEN
        out ! string.x.y; 0; (BYTE y); BYTE (SIZE SCREEN[y])::SCREEN[y]
:

--* Display what needs to be displayed
-- @param in? the SCRPROTO
-- @param out! the screen
PROC display (CHAN SCRPROTO in?, CHAN BYTE out!)
  WHILE TRUE
    PRI ALT
      in ? CASE
        --{{{  clear.screen
        clear.screen
          erase.screen(out!)
        --}}}
        --{{{  string.x.y
        BYTE x, y, len:
        [255]BYTE data:
        string.x.y; x; y; len::data
          SEQ
            cursor.x.y (x + 1, y + 1, out!)
            out.string ([data FOR (INT len)], 0, out!)
            out ! #FF
        --}}}
        --{{{  int.x.y
        BYTE x, y:
        INT v:
        int.x.y; x; y; v
          SEQ
            cursor.x.y (x + 1, y + 1, out!)
            out.int (v, 0, out!)
            out ! #FF
        --}}}
        --{{{  char.x.y
        BYTE x, y, ch:
        char.x.y; x; y; ch
          SEQ
            cursor.x.y (x + 1, y + 1, out!)
            out ! ch
            out ! #FF
        --}}}
:

--* Cylon
--
DATA TYPE CYLON
  RECORD
    INT x, y:           -- Position
    INT linear.speed:   -- Linear speed
    INT direction:      -- Direction to move
:

-- Place Cylon in screen
-- @param cylon the cylon to place on screen
-- @param scr! the screen to print the cylon
PROC place.cylon(CYLON cylon, SHARED CHAN SCRPROTO out!)
  INT seed:

  SEQ
    TIMER tim:                               -- initialise random number seed
    tim ? seed

    cylon[x], seed := random(SCREEN.POINTS[1] - 3, seed)
    cylon[x] := cylon[x] + 2                -- screen starts on 1
    cylon[y], seed := random(SCREEN.POINTS[3] - 3, seed)
    cylon[y] := cylon[y] + 2
    cylon[linear.speed] := CYLONS.SPEED
    cylon[direction] := DIR.RIGHT

    CLAIM out!
      out ! char.x.y; (BYTE cylon[x]); (BYTE cylon[y]); 'o'
:

--* Change Cylon move direction
--* Uses a random between 0 and 4 (exclusive)
-- @param cylon The cylon to change
PROC change.cylon.direction(CYLON cylon)
  TIMER tim:
  INT seed:
  SEQ
    tim ? seed
    seed := (seed >> 2) + 1

    cylon[direction], seed := random(4, seed)
    --cylon[direction] := DIR.DOWN
:

--* Move the Cylon, removing the point
-- @param cylon the cylon to move
PROC move.cylon(CYLON cylon, SHARED CHAN SCRPROTO out!)
  TIMER tim:
  INT t, prev.x, prev.y:
  SEQ
    tim ? t                     -- read current time
    t := t PLUS 100000          -- add delay
    tim ? AFTER t               -- wait until time "t"

    prev.x, prev.y := cylon[x], cylon[y]

    change.cylon.direction(cylon)

    CASE cylon[direction]
      DIR.UP
        cylon[y] := cylon[y] - cylon[linear.speed]
      DIR.DOWN
        cylon[y] := cylon[y] + cylon[linear.speed]
      DIR.LEFT
        cylon[x] := cylon[x] - cylon[linear.speed]
      DIR.RIGHT
        cylon[x] := cylon[x] + cylon[linear.speed]

    IF
      --(cylon[x] > SCREEN.POINTS[0]) AND
      --(cylon[x] < SCREEN.POINTS[1]) AND
      --(cylon[y] > SCREEN.POINTS[2]) AND
      --(cylon[y] < SCREEN.POINTS[3]) AND
      (SCREEN[cylon[y]][cylon[x]] = ' ')
        CLAIM out!
          SEQ
            out ! char.x.y; (BYTE prev.x); (BYTE prev.y); ' ' -- remove from screen
            out ! char.x.y; (BYTE cylon[x]); (BYTE cylon[y]); 'o' -- put it back
      TRUE
        cylon[x], cylon[y] := prev.x, prev.y

:

PROC main (CHAN BYTE scr!)
  [10]CYLON cylons:
  SHARED! CHAN SCRPROTO dpy.chan:

  SEQ
    cursor.invisible(scr!)
    PAR
      display(dpy.chan?, scr!)
      SEQ
        init.screen(dpy.chan!)
        SEQ i = 0 FOR SIZE cylons
          place.cylon(cylons[i], dpy.chan!)
        WHILE TRUE
          PAR i = 0 FOR SIZE cylons
            move.cylon(cylons[i], dpy.chan!)
:
